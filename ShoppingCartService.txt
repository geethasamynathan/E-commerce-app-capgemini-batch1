ShoppingCartService
==========================
using E_Commerce_Backend.CustomExceptions;
using E_Commerce_Backend.IServices;
using E_Commerce_Backend.Models;
using Microsoft.EntityFrameworkCore;

namespace E_Commerce_Backend.Service
{
    public class ShoppingCartService : IShoppingCartService
    {
        private readonly EcommerceContext _context;

        public ShoppingCartService(EcommerceContext context)
        {
            _context = context;
        }

        public async Task AddToCart(int userId, int productId, int quantity)
        {
            var product = await _context.Products.FindAsync(productId);
            if (product == null)
            {
                throw new ProductNotFoundException(productId);
            }

            var cartItem = await _context.ShoppingCarts
                .SingleOrDefaultAsync(ci => ci.UserId == userId && ci.ProductId == productId);

            if (cartItem == null)
            {
                cartItem = new ShoppingCart
                {
                    UserId = userId,
                    ProductId = productId,
                    Quantity = quantity
                };

                _context.ShoppingCarts.Add(cartItem);
            }
            else
            {
                cartItem.Quantity += quantity;
                _context.ShoppingCarts.Update(cartItem);
            }

            await _context.SaveChangesAsync();
        }
        public async Task<IEnumerable<ShoppingCart>> GetCartItems(int userId)
        {
            return await _context.ShoppingCarts
                .Include(ci => ci.Product)
                .Where(ci => ci.UserId == userId)
                .ToListAsync();
        }
        public async Task UpdateCartItem(int cartItemId, int quantity)
        {
            var cartItem = await _context.ShoppingCarts.FindAsync(cartItemId);
            if (cartItem == null)
            {
                throw new CartItemNotFoundException(cartItemId);
            }

            cartItem.Quantity = quantity;
            _context.ShoppingCarts.Update(cartItem);
            await _context.SaveChangesAsync();
        }

        public async Task RemoveFromCart(int cartItemId)
        {
            var cartItem = await _context.ShoppingCarts.FindAsync(cartItemId);
            if (cartItem == null)
            {
                throw new CartItemNotFoundException(cartItemId);
            }

            _context.ShoppingCarts.Remove(cartItem);
            await _context.SaveChangesAsync();


        }

        public async Task<decimal> GetCartTotalAmount(int userId)
        {
            var totalAmount = await _context.ShoppingCarts
                .Where(ci => ci.UserId == userId)
                .SumAsync(ci => ci.Quantity * ci.Product.Price);

            return totalAmount;
        }
    }
}
=========================
Shoppingcartmodel
=======================
using System;
using System.Collections.Generic;

namespace E_Commerce_Backend.Models;

public partial class ShoppingCart
{
    public int CartId { get; set; }

    public int UserId { get; set; }

    public int? ProductId { get; set; }

    public decimal? TotalAmount { get; set; }

    public int Quantity { get; set; }

    public DateTime? CreatedDate { get; set; }

    public virtual Product? Product { get; set; }

    public virtual User User { get; set; } = null!;
}
=============================================================
Ishoppingcart
============================================================
using E_Commerce_Backend.Models;

namespace E_Commerce_Backend.IServices
{
    public interface IShoppingCartService
    {
        
            Task AddToCart(int userId, int productId, int quantity);
            Task UpdateCartItem(int cartItemId, int quantity);
            Task RemoveFromCart(int cartItemId);
            Task<IEnumerable<ShoppingCart>> GetCartItems(int userId);
            Task<decimal> GetCartTotalAmount(int userId);
        

    }
}
==================================
shoppingcartcontroller
======================================
using E_Commerce_Backend.DTO;
using E_Commerce_Backend.IServices;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace E_Commerce_Backend.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ShoppingCartController : ControllerBase
    {
        private readonly IShoppingCartService _shoppingCartService;

        public ShoppingCartController(IShoppingCartService shoppingCartService)
        {
            _shoppingCartService = shoppingCartService;
        }

        [HttpPost("add")]
        public async Task<IActionResult> AddToCart([FromBody] CartItemDTO cartItemDto)
        {
            await _shoppingCartService.AddToCart(cartItemDto.UserId, cartItemDto.ProductId, cartItemDto.Quantity);
            return Ok();
        }

        [HttpPut("update")]
        public async Task<IActionResult> UpdateCartItem([FromBody] CartItemUpdateDTO cartItemUpdateDto)
        {
            await _shoppingCartService.UpdateCartItem(cartItemUpdateDto.CartItemId, cartItemUpdateDto.Quantity);
            return Ok();
        }

        [HttpDelete("remove/{cartItemId}")]
        public async Task<IActionResult> RemoveFromCart(int cartItemId)
        {
            await _shoppingCartService.RemoveFromCart(cartItemId);
            return Ok();
        }

        [HttpGet]
        public async Task<IActionResult> GetCartItems(int userId)
        {
            var cartItems = await _shoppingCartService.GetCartItems(userId);
            return Ok(cartItems);
        }

        [HttpGet("total")]
        public async Task<IActionResult> GetCartTotalAmount(int userId)
        {
            var totalAmount = await _shoppingCartService.GetCartTotalAmount(userId);
            return Ok(totalAmount);
        }
    }


}
===================================================
customexception
=========================================================
namespace E_Commerce_Backend.CustomExceptions
{
    public class ProductNotFoundException : Exception
    {
        public ProductNotFoundException(int productId)
            : base($"Product with ID {productId} was not found.")
        {
        }
    }
    public class CartItemNotFoundException : Exception
    {
        public CartItemNotFoundException(int cartItemId)
            : base($"Cart item with ID {cartItemId} was not found.")
        {
        }
    }


}
=========================================================
DTO
==========================================================
namespace E_Commerce_Backend.DTO
{
    public class CartItemDTO
    {
        public int UserId { get; set; }
        public int ProductId { get; set; }
        public int Quantity { get; set; }
    }

}
namespace E_Commerce_Backend.DTO
{
    public class CartItemUpdateDTO
    {
        
            public int CartItemId { get; set; }
            public int Quantity { get; set; }
       

    }
}
